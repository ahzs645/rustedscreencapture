/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface ScreenSource {
  id: string
  name: string
  width: number
  height: number
  isDisplay: boolean
}
export interface AudioDevice {
  id: string
  name: string
  deviceType: string
}
export interface RecordingConfiguration {
  width?: number
  height?: number
  fps?: number
  showCursor?: boolean
  captureAudio?: boolean
  audioDeviceId?: string
  outputPath: string
  pixelFormat?: string
  colorSpace?: string
}
export const kCVPixelFormatType_32BGRA: number
export const kCGColorSpaceSRGB: number
export declare function initScreencapturekit(): void
export declare function getVersion(): string
export declare function checkScreenRecordingPermission(): boolean
export declare function requestScreenRecordingPermission(): boolean
/** Complete async ScreenCaptureKit recorder with full functionality */
export declare class ScreenCaptureKitRecorder {
  constructor()
  /** Get available screens using real ScreenCaptureKit async APIs */
  getAvailableScreens(): Promise<Array<ScreenSource>>
  /** Start recording using complete ScreenCaptureKit async APIs */
  startRecording(screenId: string, config: RecordingConfiguration): Promise<string>
  stopRecording(): Promise<string>
  isRecording(): Promise<boolean>
  getStatus(): string
  /** Get available windows */
  getAvailableWindows(): Promise<Array<ScreenSource>>
}
/** Integrated recording manager with complete functionality */
export declare class IntegratedRecordingManager {
  constructor()
  initialize(): Promise<void>
  startRecording(config: RecordingConfiguration): Promise<string>
  stopRecording(): Promise<string>
  getAvailableScreens(): Promise<Array<ScreenSource>>
  getAvailableWindows(): Promise<Array<ScreenSource>>
  isRecording(): boolean
}
